steps:
  - read: project_name
    from: git.remote_name
    fallback:
      prompt: What is the name of the project?
      default:
        from: path.rootdir

  - read: database_type
    prompt: What database type do you want to use?
    choices:
      - MongoDB:
          steps:
            - read: database_import
              eval: "import SampleSchema from './schemas/sampleSchema';"
            - read: database_sql
              eval: ""
            - read: database_var
              eval: "const database = new MongoPersistence(readDatabase, {\n\tsample: new SampleSchema(),\n});"
            - read: database_port
              eval: "27017"
            - read: database_name
              eval: ""
            - read: database_user
              eval: ""
            - read: database_password
              eval: ""
            - read: database_encryption_disabled
              eval: ""
            - read: database_image
              eval: "mongo"
            - read: database_env_name
              eval: "MONGO_INITDB_ROOT_USERNAME"
            - read: database_env_password
              eval: "MONGO_INITDB_ROOT_PASSWORD"
            - read: database_env_database
              eval: "MONGO_INITDB_DATABASE"
            - remove: src/dAOs/sampleDAO.ts
            - remove: src/dAOs
            - eval: 'MongoDB'
      - PGSQL:
          steps:
          - read: database_import
            eval: "import { DAOPersistence } from '@flexiblepersistence/dao';\nimport { PGSQL } from '@flexiblepersistence/pgsql';\nimport SampleDAO from './dAOs/sampleDAO';"
          - read: database_sql
            eval: "\nconst sql = new PGSQL(readDatabase);"
          - read: database_var
            eval: "const database = new DAOPersistence(sql, {\n\tsample: new SampleDAO(),\n});"
          - read: database_port
            eval: "5432"
          - read: database_name
            eval: "db"
          - read: database_user
            eval: "sa"
          - read: database_password
            eval: "Passw@rd"
          - read: database_encryption_disabled
            eval: ""
          - read: database_image
            eval: "mcr.microsoft.com/azure-sql-edge"
          - read: database_env_name
            eval: "POSTGRES_USER"
          - read: database_env_password
            eval: "POSTGRES_PASSWORD"
          - read: database_env_database
            eval: "POSTGRES_DB"
          - remove: src/schemas/sampleSchema.ts
          - remove: src/schemas
          - eval: 'PGSQL'
      - MSSQL:
          steps:
          - read: database_import
            eval: "import { DAOPersistence } from '@flexiblepersistence/dao';\nimport { MSSQL } from '@flexiblepersistence/mssql';\nimport SampleDAO from './dAOs/sampleDAO';"
          - read: database_sql
            eval: "\nconst sql = new MSSQL(readDatabase);"
          - read: database_var
            eval: "const database = new DAOPersistence(sql, {\n\tsample: new SampleDAO(),\n});"
          - read: database_port
            eval: "1433"
          - read: database_name
            eval: "db"
          - read: database_user
            eval: "sa"
          - read: database_password
            eval: "Passw@rd"
          - read: database_encryption_disabled
            eval: "true"
          - read: database_image
            eval: "postgres"
          - read: database_env_name
            eval: "MSSQL_SA_USER"
          - read: database_env_password
            eval: "MSSQL_SA_PASSWORD"
          - read: database_env_database
            eval: "MSSQL_DB"
          - remove: src/schemas/sampleSchema.ts
          - remove: src/schemas
          - eval: 'MSSQL'

  - read: framework
    prompt: What rest framework do you want to use?
    choices:
      - express
      - aws-lambda
      - next

  - read: disable_write_database
    prompt: Disable write database?
    choices:
      - yes:
          steps:
          - eval: 'true'
      - no:
          steps:
          - eval: 'false'

  - update: README.md
  - update: docker-compose.yml
  - update: package.json
  - update: .env
  - update: .github/workflows/Test.yml
  - update: src/dBHandler.ts